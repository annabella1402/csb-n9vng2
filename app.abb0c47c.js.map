{"version":3,"sources":["src/app.js"],"names":["displayCurrentTime","timestamp","date","Date","hours","getHours","concat","minutes","getMinutes","day","getDay","formatDay","displayForecast","response","forecast","data","daily","forecastElement","document","querySelector","forecastHTML","forEach","forecastDay","index","time","condition","icon_url","icon","Math","round","temperature","maximum","minimum","innerHTML","getForecast","coordinates","apiUrl","longitude","latitude","axios","get","then","showTemperature","current","city","description","humidity","wind","speed","setAttribute","search","handleSubmit","event","preventDefault","value","form","addEventListener"],"mappings":";AAAA,SAASA,EAAmBC,GAC1B,IAAIC,EAAO,IAAIC,KAAKF,GAChBG,EAAQF,EAAKG,WACbD,EAAQ,KACVA,EAAKE,IAAAA,OAAOF,IAEd,IAAIG,EAAUL,EAAKM,aACfD,EAAU,KACZA,EAAOD,IAAAA,OAAOC,IAGhB,IASIE,EATO,CACT,SACA,SACA,UACA,YACA,WACA,SACA,YAEaP,EAAKQ,UACpB,MAAAJ,GAAAA,OAAUG,EAAGH,KAAAA,OAAIF,EAAKE,KAAAA,OAAIC,GAG5B,SAASI,EAAUV,GAKjB,MAFW,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAF3C,IAAIE,KAAiB,IAAZF,GACLS,UAMjB,SAASE,EAAgBC,GACvB,IAAIC,EAAWD,EAASE,KAAKC,MAEzBC,EAAkBC,SAASC,cAAc,aAEzCC,EAAkC,oBACtCN,EAASO,QAAQ,SAAUC,EAAaC,GAClCA,EAAQ,IACVH,GACcd,2EAAAA,OAGyBK,EAAUW,EAAYE,MAAKlB,sCAAAA,OAErDgB,EAAYG,UAAUC,SAAQpB,SAAAA,OACvCgB,EAAYG,UAAUE,KAAIrB,6IAAAA,OAIwBsB,KAAKC,MACrDP,EAAYQ,YAAYC,SACzBzB,yEAAAA,OACiDsB,KAAKC,MACrDP,EAAYQ,YAAYE,SAIjC,kDAIDZ,GAAsC,SACtCH,EAAgBgB,UAAYb,EAG9B,SAASc,EAAYC,GACnB,IACIC,EAAM9B,mDAAAA,OAAsD6B,EAAYE,UAAS/B,SAAAA,OAAQ6B,EAAYG,SAAQhC,SAAAA,OADpG,mCACiI,iBAE9IiC,MAAMC,IAAIJ,GAAQK,KAAK7B,GAGzB,SAAS8B,EAAgB7B,GACEK,SAASC,cAAc,gBAC7Bc,UAAYL,KAAKC,MAAMhB,EAASE,KAAKe,YAAYa,SAClDzB,SAASC,cAAc,SAC7Bc,UAAYpB,EAASE,KAAK6B,KACb1B,SAASC,cAAc,gBAC7Bc,UAAYpB,EAASE,KAAKU,UAAUoB,YACjC3B,SAASC,cAAc,aAC7Bc,UAAYL,KAAKC,MAAMhB,EAASE,KAAKe,YAAYgB,UAC/C5B,SAASC,cAAc,SAC7Bc,UAAYL,KAAKC,MAAMhB,EAASE,KAAKgC,KAAKC,OAC3C9B,SAASC,cAAc,SAC7Bc,UAAYjC,EAAwC,IAArBa,EAASE,KAAKS,MAChCN,SAASC,cAAc,SAC7B8B,aAAa,MAAK3C,GAAAA,OAAKO,EAASE,KAAKU,UAAUC,WAC3DC,KAAKsB,aAAa,MAAK3C,GAAAA,OAAKO,EAASE,KAAKU,UAAUoB,cACpDX,EAAYrB,EAASE,KAAKoB,aAG5B,SAASe,EAAON,GACd,IACIR,EAAM9B,oDAAAA,OAAuDsC,EAAItC,SAAAA,OADxD,mCACqF,iBAClGiC,MAAMC,IAAIJ,GAAQK,KAAKC,GAGzB,SAASS,EAAaC,GACpBA,EAAMC,iBAENH,EADuBhC,SAASC,cAAc,eACtBmC,OAG1B,IAAIC,EAAOrC,SAASC,cAAc,gBAClCoC,EAAKC,iBAAiB,SAAUL,GAEhCD,EAAO","file":"app.abb0c47c.js","sourceRoot":"..","sourcesContent":["function displayCurrentTime(timestamp) {\n  let date = new Date(timestamp);\n  let hours = date.getHours();\n  if (hours < 10) {\n    hours = `0${hours}`;\n  }\n  let minutes = date.getMinutes();\n  if (minutes < 10) {\n    minutes = `0${minutes}`;\n  }\n\n  let days = [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\"\n  ];\n  let day = days[date.getDay()];\n  return `${day} ${hours}:${minutes}`;\n}\n\nfunction formatDay(timestamp) {\n  let date = new Date(timestamp * 1000);\n  let day = date.getDay();\n  let days = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n\n  return days[day];\n}\n\nfunction displayForecast(response) {\n  let forecast = response.data.daily;\n\n  let forecastElement = document.querySelector(\"#forecast\");\n\n  let forecastHTML = `<div class=\"row\">`;\n  forecast.forEach(function (forecastDay, index) {\n    if (index < 6) {\n      forecastHTML =\n        forecastHTML +\n        `\n      <div class=\"col-2\">\n        <div class=\"weather-forecast-date\">${formatDay(forecastDay.time)}</div>\n       \n        <img src=${forecastDay.condition.icon_url} alt=${\n          forecastDay.condition.icon\n        } width=\"42\" \n        />\n        <div class=\"weather-forecast-temperatures\">\n          <span class=\"weather-forecast-temperature-max\"> ${Math.round(\n            forecastDay.temperature.maximum\n          )}° </span>\n          <span class=\"weather-forecast-temperature-min\"> ${Math.round(\n            forecastDay.temperature.minimum\n          )}° </span>\n        </div>\n      </div>\n  `;\n    }\n  });\n\n  forecastHTML = forecastHTML + `</div>`;\n  forecastElement.innerHTML = forecastHTML;\n}\n\nfunction getForecast(coordinates) {\n  let apiKey = \"b8b61a4d34f03tcbf3192f94o59a0ba4\";\n  let apiUrl = `https://api.shecodes.io/weather/v1/forecast?lon=${coordinates.longitude}&lat=${coordinates.latitude}&key=${apiKey}&units=metric`;\n\n  axios.get(apiUrl).then(displayForecast);\n}\n\nfunction showTemperature(response) {\n  let temperatureElement = document.querySelector(\"#temperature\");\n  temperatureElement.innerHTML = Math.round(response.data.temperature.current);\n  let cityElement = document.querySelector(\"#city\");\n  cityElement.innerHTML = response.data.city;\n  let descriptionElement = document.querySelector(\"#description\");\n  descriptionElement.innerHTML = response.data.condition.description;\n  let humidityElement = document.querySelector(\"#humidity\");\n  humidityElement.innerHTML = Math.round(response.data.temperature.humidity);\n  let windElement = document.querySelector(\"#wind\");\n  windElement.innerHTML = Math.round(response.data.wind.speed);\n  let date = document.querySelector(\"#date\");\n  date.innerHTML = displayCurrentTime(response.data.time * 1000);\n  let iconElement = document.querySelector(\"#icon\");\n  iconElement.setAttribute(\"src\", `${response.data.condition.icon_url}`);\n  icon.setAttribute(\"alt\", `${response.data.condition.description}`);\n  getForecast(response.data.coordinates);\n}\n\nfunction search(city) {\n  let apiKey = \"b8b61a4d34f03tcbf3192f94o59a0ba4\";\n  let apiUrl = `https://api.shecodes.io/weather/v1/current?query=${city}&key=${apiKey}&units=metric`;\n  axios.get(apiUrl).then(showTemperature);\n}\n\nfunction handleSubmit(event) {\n  event.preventDefault();\n  let cityInputElement = document.querySelector(\"#city-input\");\n  search(cityInputElement.value);\n}\n\nlet form = document.querySelector(\"#search-form\");\nform.addEventListener(\"submit\", handleSubmit);\n\nsearch(\"Caracas\");\n"]}